#!/bin/sh

set -e

ANSIDBG=${ANSIDBG:-}
set -u

# $0 is the full path to the script; $base0 is just the name of the script
base0=$(basename $0)

usage_msg=$(cat <<ENDUSAGE
NAME
    $base0 -- easily color the terminal

SYNOPSIS
    $base0 [-h] [-b] <SETTING [<SETTING>...]>

ARGUMENTS
    -h: Print help and exit
    -b: Surround the ANSI codes with '\[' and '\]'
        See the BASH PROMT section for more details
        NOTE: THIS IS BROKEN CURRENTLY, SEE THE BUGS SECTION
    SETTING: A setting, of the form NAME=VALUE
        NAME: one of "mode", "fg", or "bg"
        VALUE: a value for the setting
            if the setting is MODE, see MODE
            if the setting is FG or BG, see COLOR
    MODE:  One of bold, unbold, under, ununder, or reset
           under/ununder will underline or un-underline respectively
           reset will undo any settings
    COLOR: One of black, red, green, yellow, blue, magenta, cyan, or white

BASH PROMPT
    NOTE: UNFORTUNATELY, THIS IS NOT WORKING AND I AM NOT SURE WHY

    The bash prompt keeps track of its length, in characters, in order to
    propertly wrap text if the command line being entered gets too long.
    Unfortunately, it does so indiscriminately - even non-printable characters,
    which by definition do not take up space on the line, are counted by
    default. To work around this, sequences of non-printable characters can be
    wrapped in backslash-open-bracket and backslash-close-bracket (\[ and \]).

    Note that this is only the case within the bash *prompt*; any other use of
    non-printable characters in bash does not require this, and the \[ and \]
    sequences are printed literally in any other context.

ENVIRONMENT
    \$ANSIDBG: If set, print debugging information

EXAMPLES
    > $base0 mode=bold fg=green bg=white
    > $base0 mode=reset
    > $base0 -b mode=under fg=white bg=black

BUGS
    The bash prompt wrapper isn't working, and I don't know why.

NOTES
    This has been tested on macOS and Linux
    It is unlikely to work as-is for all terminals ever created
    References:
    http://pubs.opengroup.org/onlinepubs/9699919799/utilities/tput.html
    http://linux.101hacks.com/ps1-examples/prompt-color-using-tput/
    http://tldp.org/HOWTO/Bash-Prompt-HOWTO/nonprintingchars.html
ENDUSAGE
)

usage() {
    echo "$usage_msg" | less
}

dbgprintf() {
    if test "$ANSIDBG"; then
        printf >&2 "$@"
    fi
}

color2code() {
    if test $# -ne 1; then usage; exit 1; fi
    case "$1" in
        black)   printf 0;;
        red)     printf 1;;
        green)   printf 2;;
        yellow)  printf 3;;
        blue)    printf 4;;
        magenta) printf 5;;
        cyan)    printf 6;;
        white)   printf 7;;

        bold)    printf bold;;
        unbold)  printf dim;;
        under)   printf smul;;
        ununder) printf rmul;;
        reset)   printf sgr0;;
        *)       usage; exit 1;;
    esac
}
mode2operand() {
    if test $# -ne 1; then usage; exit 1; fi
    case "$1" in
        mode) printf "";;
        fg)   printf "setaf";;
        bg)   printf "setab";;
        *)    usage; exit 1;;
    esac
}

# Use $0 instead of $base0 for debugging
dbgprintf "$$: $0 $*\n"

if test $# -eq 0; then usage; exit 1; fi

bashprompt=
output=
while test $# -gt 0; do
    dbgprintf "  $$: Processing arg ${1}"
    case "$1" in
        -h) dbgprintf ", printing help...\n"; usage; exit 0;;
        -b)
            bashprompt=1
            dbgprintf "\n"
            shift;;
        *)
            name=${1%%=*}   # The part of the parameter after the =
            value=${1##*=}  # The part of the parameter before the =
            operand=$(mode2operand "$name")
            code=$(color2code "$value")
            dbgprintf ", $name=$value, \$(tput $operand $code)\n"
            output="${output}$(tput $operand $code)"
            shift;;
    esac
done

if test "$bashprompt"; then
    printf "\[$output\]"
else
    printf "$output"
fi
