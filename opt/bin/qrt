#!/usr/bin/python3 
# -*- mode: python -*-

# Query RT

# http://requesttracker.wikia.com/wiki/REST

import sys
import os
import time
#import subprocess
#import re
import datetime
#import xml.etree.ElementTree as ET
import http.client
import ssl
import argparse
import urllib


cacert=os.path.abspath(os.path.expanduser('~/Downloads/NeuricCA.cer'))
rtserver="bugs.neuric.internal" # we assume https

def debugprint(text):
    print("DEBUG: " + str(text))

class RTServer:
    def __init__(self, rtserver, ssl=False, cacert=False, username="", password=""):
        self.rtserver = rtserver
        self.ssl=ssl
        self.cacert=cacert
        self.username=username
        self.password=password
        self.bodyauth = "user={}&pass={}".format(username, password)
        self.setup_connection()

    def setup_connection(self):
        if self.ssl:
            context = ssl.SSLContext(ssl.PROTOCOL_TLSv1)
            context.verify_mode = ssl.CERT_REQUIRED
            context.load_verify_locations(self.cacert)
            self.conn = http.client.HTTPSConnection(rtserver, context=context)
        else:
            self.conn = http.client.HTTPConnection(rtserver)

    def get_ticket(self, tid):
        urlpath=urllib.parse.quote("/REST/1.0/ticket/{}/show".format(str(tid)).format("utf8"))
        qurlpath=urllib.parse.quote(urlpath.encode("utf8"))
        debugprint(qurlpath)
        #self.conn = self.setup_connection()
        self.conn.request("POST", qurlpath, body=self.bodyauth)
        response = self.conn.getresponse()
        return response.read().decode()
    
    def get_query_results(self, query):
        urlpath="/REST/1.0/search/ticket?query={}".format(query).format("utf8")
        #qurlpath=urllib.parse.quote(urlpath.encode("utf8"))
        qurlpath=urlpath
        debugprint(qurlpath)
        #self.conn = self.setup_connection()
        self.conn.request("POST", qurlpath, body=self.bodyauth)
        response = self.conn.getresponse()
        return response.read().decode()

def main(*args):
    argparser = argparse.ArgumentParser()
    argparser.add_argument('username', action='store', help="Your RT username")
    argparser.add_argument('password', action='store', help="Your RT password")

    h="Query for the RT API. Can be an integer, which is interpreted as a request to display a "
    h+="ticket ID, or a string, which is interpreted as a query to pass to RT's search."
    argparser.add_argument('query', action='store', help=h)

    args = argparser.parse_args()
    RT = RTServer(rtserver, ssl=True, cacert=cacert, username=args.username, password=args.password)
    try:
        # attempt to see the query as an int
        results = RT.get_ticket(int(args.query))
    except ValueError:
        # didn't work, use it as a string
        results = RT.get_query_results(args.query)

    print(results)

if __name__ == '__main__':
    sys.exit(main(*sys.argv))
