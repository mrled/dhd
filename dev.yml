---
# assumes Debian 8 (jessie)

# Install/configure Apache:
- hosts: blog-servers

  vars:
    ghost_hostname: blog-dev.younix.us
    ghost_url: "http://{{ ghost_hostname }}/"
    ghost_container_name: younix-ghost
    ghost_content_dir: /srv/docker/ghostcontent

    discourse_hostname: 'talk-dev.younix.us'
    discourse_container_name: younix-discourse
    discourse_dir: '/srv/docker/discourse'

    swap_file_path: '/swapfile'
    swap_file_size_mb: 2048

  vars_files: 
    - secret.yml



  tasks:
  - name: Apache | Install apache
    apt: name=apache2 update_cache=yes state=latest

  - name: Apache | Remove default apache configuration
    file: path=/etc/apache2/sites-enabled/000-default.conf state=absent
    notify: 
    - restart-apache

  - name: Apache | Add generic configuration
    copy: src=apache.generic.conf dest=/etc/apache2/sites-available/generic.conf owner=root group=root mode=0644
    notify: 
    - restart-apache
  - name: Apache | Link generic configuration
    file: path=/etc/apache2/sites-enabled/generic.conf state=link src=../sites-available/generic.conf
    notify: 
    - restart-apache

  # - name: Apache | Make includes dir
  #   file: path=/etc/apache2/younix.us-includes state=directory owner=root group=root mode=0755
  # - name: Apache | Add ghost configuration
  #   copy: src=apache.ghost.conf dest=/etc/apache2/younix.us-includes/ghost.conf owner=root group=root mode=0644
  #   notify: 
  #   - restart-apache
  # - name: Apache | Add discourse configuration
  #   copy: src=apache.discourse.conf dest=/etc/apache2/younix.us-includes/discourse.conf owner=root group=root mode=0644
  #   notify: 
  #   - restart-apache


  - name: Apache | Add younix blog configuration
    template: src=apache.ghost.conf.j2 dest=/etc/apache2/sites-available/ghost.conf owner=root group=root mode=0644
    notify: 
    - restart-apache
  - name: Apache | Link younix blog configuration
    file: path=/etc/apache2/sites-enabled/ghost.conf state=link src=../sites-available/ghost.conf
    notify: 
    - restart-apache
  - name: Apache | Add discourse configuration
    template: src=apache.discourse.conf.j2 dest=/etc/apache2/sites-available/discourse.conf owner=root group=root mode=0644
    notify: 
    - restart-apache
  - name: Apache | Link discourse configuration
    file: path=/etc/apache2/sites-enabled/discourse.conf state=link src=../sites-available/discourse.conf
    notify: 
    - restart-apache




  - name: Apache | Enable mod_rewrite
    apache2_module: name=rewrite state=present
    notify: 
    - restart-apache
  - name: Apache | Enable mod_proxy
    apache2_module: name=proxy state=present
    notify: 
    - restart-apache
  - name: Apache | Enable mod_proxy_http
    apache2_module: name=proxy_http state=present
    notify: 
    - restart-apache


# Install Docker
  # Backports is required for Docker
  - name: Docker | Enable backports
    apt_repository: repo='deb http://http.debian.net/debian jessie-backports main' state=present update_cache=yes
  - name: Docker | Install docker
    apt: pkg=docker.io default_release=jessie-backports 
    notify: 
    - start-docker
  - name: Docker | Install pip
    easy_install: name=pip 
  - name: Docker | Install docker-py
    pip: name=docker-py version=1.1.0

# Install Ghost
# Thd dox for this Docker container are bullshit. The comments here are helpful 
# <https://registry.hub.docker.com/u/library/ghost/>
  - name: Ghost | Make ghost_content_dir
    file: path="{{ ghost_content_dir }}" state=directory owner=root group=root mode=0755
  - name: Ghost | Upload config.js
    template: src=ghost.config.js.j2 dest={{ ghost_content_dir }}/config.js owner=root group=root mode=0644
  - name: Ghost | Run Docker container
    docker:
      name: "{{ ghost_container_name }}"
      image: ghost
      pull: always
      state: reloaded
      ports: 
      - "127.0.0.1:2368:2368"
      volumes:
      - "{{ ghost_content_dir }}:/var/lib/ghost"
      env: 
        #VIRTUAL_HOST: "{{ hostname }}"
        NODE_ENV: production
  - name: Ghost | Test that container is up
    command: bash -c "docker ps | grep -e '\W{{ ghost_container_name }}\W*$'"
  - name: Ghost | Test that the web service is responding locally
    command: curl localhost:2368
  - name: Ghost | Test that the web service is responding to its proper URL
    command: curl "{{ ghost_url }}"

# Swap is required for Discourse lololol
  - name: mkswap | Create swap file
    command: dd if=/dev/zero of={{ swap_file_path }} bs=1M count={{ swap_file_size_mb }} creates="{{ swap_file_path }}"
  - name: mkswap | Change swap file permissions
    file: path="{{ swap_file_path }}" owner=root group=root mode=0600
  - name: mkswap | Check swap file type
    command: file {{ swap_file_path }}
    register: swapfile
    changed_when: False
  - name: mkswap | Make swap file
    command: "mkswap {{ swap_file_path }}"
    when: swapfile.stdout.find('swap file') == -1
  - name: mkswap | Write swap entry in fstab
    mount: name=none src={{ swap_file_path }} fstype=swap opts=sw passno=0 dump=0 state=present
  - name: mkswap | Mount swap
    command: "swapon {{ swap_file_path }}"
    when: ansible_swaptotal_mb < 1


# Install Discourse
  - name: Discourse | Clone Discourse repository
    git: repo=https://github.com/discourse/discourse_docker.git dest={{ discourse_dir }}
    notify: 
    - rebuild-discourse
  - name: Discourse | Add app yml
    template: src=discourse.app.yml dest={{ discourse_dir }}/containers/{{ discourse_container_name }}.yml owner=root group=root mode=0644
    notify: 
    - rebuild-discourse
  - name: Discourse | Test that container is up
    command: bash -c "docker ps | grep -e '\W{{ discourse_container_name }}\W*$'"

  handlers: 
  - name: restart-apache
    service: name=apache2 state=restarted
  - name: start-docker
    service: name=docker state=started
  - name: bootstrap-discourse
    #shell: "{{ discourse_dir }}/launcher bootstrapp {{ discourse_container_name }}"
    shell: "bash -c '{{ discourse_dir }}/launcher bootstrap {{ discourse_container_name }}'"
  - name: start-discourse
    shell: "bash -c '{{ discourse_dir }}/launcher start {{ discourse_container_name }}'"
  - name: rebuild-discourse
    shell: "bash -c '{{ discourse_dir }}/launcher rebuild {{ discourse_container_name }}'"


