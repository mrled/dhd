;; mrled's .emacs.w32 file
;; lots from http://homepages.inf.ed.ac.uk/s0243221/emacs/

; dont create those dumb file~ files every time we edit something
;(setq make-backup-files nil) 
; make backups to a certain directory
(setq make-backup-files t) ;; Enable backup files.
(setq version-control t) ;; Enable versioning with default values (keep five last versions, I think!)
(setq backup-directory-alist (quote ((".*" . "~/Backup/emacs/")))) ;; Save all backup file in this directory.
(setq delete-old-versions t)     ; don't ask me every time if I want to delete old versions - just do it
(fset 'yes-or-no-p 'y-or-n-p)    ; Make all "yes or no" prompts show "y or n" instead
(setq mouse-autoselect-window t) ; focus-follows-mouse. NOT frames... just for emacs' WINDOWS only. 
(setq display-time-24hr-format t)
(setq display-time-day-and-date t)

;;;; for the love of mercy, indent the same way every time!
;; see: http://www.student.northpark.edu/pemente/emacs_tabs.htm
;; make it never use \t; it only uses a regular space: ' '
(setq-default indent-tabs-mode nil) ; tab char = 4 wide (when read from disk)
(setq default-tab-width 4)
(define-key text-mode-map (kbd "TAB") 'tab-to-tab-stop);; bind [tab] to tab-to-tab-stop in text mode
;; set the tab stop list such that a tab = 4 spaces, not 8
(setq tab-stop-list '(4 8 16 20 24 28 32 36 40 44 48 52 56 60 64 68 72 76 80 84 88 92 96 100 104 108 112 116 120))

(setq require-final-newline t) ;; Always end a file with a newline
(setq next-line-add-newlines nil) ;; Stop at the end of the file, not just add lines

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(emacsw32-style-frame-title t)
 '(mail-host-address "mail.vlack.com")
 '(mail-use-rfc822 nil)
 '(pr-gs-command "c:\\Program Files\\gs\\gs8.54\\bin\\gswin32c.exe")
 '(pr-gv-command "C:\\Program Files\\Ghostgum\\gsview\\gsview32.exe")
 '(rmail-enable-mime t)
 '(rmail-file-name "~/.RMAIL")
 '(tool-bar-mode nil)
 '(transient-mark-mode t)
 '(user-full-name "Micah R Ledbetter")
 '(user-mail-address "vlack@vlack.com"))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 )

(line-number-mode 1) ;; Show line-number in the mode line
(column-number-mode 1) ;; Show column-number in the mode line







;(when (eq system-type 'windows-nt)
      ;;
      ;; set font
      ;;
;      (setq current-font "-*-Courier-normal-r-*-*-13-97-*-*-c-*-*-ansi-")
      ;;
      ;; Add support for nmake
      ;;
;      (setq compile-command '("nmake " . 6))
      ;;
      ;; This  assumes  that  Cygwin  is  installed in C:\cygwin (the
      ;; default)  and  that  C:\cygwin\bin  is  not  already in your
      ;; Windows Path (it generally should not be).
      ;;
      ;; (setq exec-path (cons "C:/cygwin/bin" exec-path))
      ;; (setenv "PATH" (concat "C:\\cygwin\\bin;" (getenv "PATH")))
      ;;
      ;; NT-emacs assumes a Windows command shell, which you change
      ;; here.
      ;;
;      (setq process-coding-system-alist '(("bash" . undecided-unix)))
;      (setq w32-quote-process-args ?\")
;      (setq shell-file-name "bash")
;      (setenv "SHELL" shell-file-name) 
;      (setq explicit-shell-file-name shell-file-name) 
;      (setq current-top  0)
;      (setq current-left 72) ;; leave room for icons.
      ;;
      ;; This removes unsightly ^M characters that would otherwise
      ;; appear in the output of java applications.
      ;;
;      (add-hook 'comint-output-filter-functions 'comint-strip-ctrl-m))



;; Font stuff:
(global-font-lock-mode t) ;; syntax highlighting?
(defvar myfont "-*-ProFontWindows-normal-r-*-*-12-*-*-*-c-*-*-iso8859-1") ;;font = ProFontWindows 9pt
(setq default-frame-alist
  (list
    (cons 'font      myfont)
    (cons 'foreground-color  "white")
    (cons 'background-color  "black")
    (cons 'cursor-color'  "green")
  )
)
(setq initial-frame-alist default-frame-alist)

;; Windows PowerShell - THIS DOESN'T WORK (WELL)
;(require 'powershell-mode) ; powershell script editing mode (entirely optional)
;(setq exec-path (cons "C:/system32/WindowsPowerShell/v1.0" exec-path)) ; The path to PowerShell
;(setq explicit-shell-file-name "powershell")      ; Filename of the PowerShell shell
;(setq shell-file-name explicit-shell-file-name)   ; Tell Emacs to use PowerShell
;(setq shell-command-switch "-Command")            ; Argument to use when executing a single command
;(setq explicit-powershell-args '("-command" "-")) ; Arguments when starting an interactive shell

;; eshell stuff
; make C-a go to the beginning of the command line, unless it is already there, in which case 
;  it goes to the real beginning of the line
(defun eshell-maybe-bol ()
  (interactive)
  (let ((p (point)))
    (eshell-bol)
    (if (= p (point))
        (beginning-of-line))))
(add-hook 'eshell-mode-hook '(lambda () (define-key eshell-mode-map "\C-a" 'eshell-maybe-bol)))
; path and stuff (not sure what it all does... http://www.khngai.com/emacs/eshell.php)
(add-hook 'eshell-mode-hook
   '(lambda nil
;   (let ((path))
;      (setq path ".;c:/program files/microsoft visual studio/vb98/")
;      (setq path (concat path ";d:/program files/microsoft visual studio/vc98/bin"))
;    (setenv "PATH" path))
   (local-set-key "\C-u" 'eshell-kill-input))
 )
(defcustom eshell-ask-to-save-history t
  "*Determine if history should be automatically saved.
History is always preserved after sanely exiting an Eshell buffer.
However, when Emacs is being shut down, this variable determines
whether to prompt the user.
If set to nil, it means never ask whether history should be saved.
If set to t, always ask if any Eshell buffers are open at exit time.
If set to `always', history will always be saved, silently."
  :type '(choice (const :tag "Never" nil)
		 (const :tag "Ask" t)
		 (const :tag "Always save" always))
  :group 'eshell-hist)
