SHELL=/bin/sh

LOGFILE=$HOME/.pmlog
LOGABSTRACT="all"
VERBOSE="on"

# try to use dovecot to deliver
#DELIVER="/usr/lib/dovecot/deliver"
# fallback
MAILDIR=$HOME/.maildir/
DEFAULT=$MAILDIR

# Condition scoring
# (mostly taken from <http://perlcode.org/tutorials/procmail/proctut/proctip2.pod> )
# See my section on trash mail for examples on how to use this value, but it's
# designed to facilitate "OR" matching - if a message matches any or all of some
# list of conditions. 
SPR=2147483647

### Random stupid things not to forget:
# 1 close your freaking folders with a "/". it's ".lists.sunhelp-geeks/"
# 2 start with a "*", don't just begin your rule. that is bad bad bad. 
# 3 the "+" must be escaped with a "\", as must all "." characters. 
# 4 don't put comments on the end of lines. a line like 
#       * $ $SPR^0 ^Subject:.*cows   # this matches "cows"
#   will be evaluated much differently than you think.

# All email for api@<postfix_domains> gets its own deal
:0
* ^Delivered-To: api.*
{
    # For debugging, copy all email to my api folder first: 
    :0c
    .api/

    # For now, I'm only going to accept mail to api@younix.us...
    # api@anything.else gets nuked
    :0
    * !^Delivered-To: api\@younix\.us
    /dev/null

    # Everything else belongs in the .pmapi rc file
    INCLUDERC=$HOME/.pmapi

    # API email shouldn't go to main mailbox; if it wasn't handled by the
    # .pmapi rc file, just bit bucket that shit
    :0
    /dev/null
}

:0
#* ^Delivered-To:.*mledbetter\@neuric\.com.*
* ^X-Original-To:.*micah\+neuric\@micahrl\.com.*
.Neuric/

# Trash mail - I don't ever want to see this shit
# Use this as my example of condition scoring... matching ANY of these
# conditions is enough to dump the mail to /dev/null
:0:
* $ $SPR^0 ^To:.*vlack\+spam
* $ $SPR^0 ^To:.*vlack\+temp
* $ $SPR^0 ^From:.*Vanessa.*Smith
* $ $SPR^0 ^To:.*vlack\+f\.retailreportcard
* $ $SPR^0 .*vlack\+f\.retailreportcard
* $ $SPR^0 .*retailreportcard.*
* $ $SPR^0 ^X-Original-To:.*offers 
* $ $SPR^0 ^From:.*Club.*VIP.*
* $ $SPR^0 ^From:.*RuneScape.*
/dev/null

# Capstone
:0
* ^X-Original-To: .*vlack\+capstone\@vlack\.com
/dev/null
#.Capstone/

# SXSW shit
:0
* $ $SPR^0 ^X-Original-To: sxsw@micahrl.com
* $ $SPR^0 ^X-Original-To: sxsw@younix.us
.SXSW/


# Alternative Identities
:0
* $ $SPR^0 ^X-Original-To: isabel@younix.us
* $ $SPR^0 ^X-Original-To: httpcoed@younix.us
* $ $SPR^0 ^X-Original-To: http_coed@younix.us
* $ $SPR^0 ^X-Original-To: httpcoed404@younix.us
* $ $SPR^0 ^X-Original-To: unicoed@younix.us
.altident/


# Facebook agh so many messages
:0
* $ $SPR^0 ^From: .*facebookmail\.com
* $ $SPR^0 ^From: .*twitter\.com
* $ $SPR^0 ^From: .*linkedin\.com
* $ $SPR^0 ^Subject:.*FACEBOOKRULETESTOMGLOL.*
{
  # this block marks all the messages read; see http://raamdev.com/2007/using-procmail-to-mark-as-read/


  #without leading . or training / and I dunno if this works on subfolders like .Facebook.Bullshit or anything
  foldername=Facebook 
 
  # store the mail in the folder:
  :0c
  .$foldername/ 
 
  # use 'mv' to take the mail from $foldername/new to $foldername/cur
  # ... in essence, marking the mail read
  :0
  * LASTFOLDER ?? /\/[^/]+$
  { tail=$MATCH }
 
  TRAP="mv $LASTFOLDER .$foldername/cur/$tail:2,S"
 
  HOST
}

### my lists stuff. based on 
## Jamie Wilkinson's http://spacepants.org/dot.procmailrc
## and more that I don't have mentioned here mmmk

## announce lists can all go in the same place as far as I'm concerned
:0 
* $ $SPR^0 ^List-Id:.*announce.*
* $ $SPR^0 ^List-Id:.*freeverse.*
* $ $SPR^0 ^List-Id:.*ambrosia.*
* $ $SPR^0 ^Sender:.*owner.*announce.*
* $ $SPR^0 ^Sender:.*announce.*owner.*
* $ $SPR^0 ^List-Id:.*gentoo-gwn\.gentoo\.org
* $ $SPR^0 ^List-Id:.*fvpr\.fridge\.net 
* $ $SPR^0 ^List-Id:.*security-announce\.lists\.apple\.com
* $ $SPR^0 ^List-Id:.*spokengroove.*
* $ $SPR^0 ^Subject:.*testingannouncerule.*
* $ $SPR^0 ^To:.*lemswap\@googlegroups\.com
* $ $SPR^0 ^List-Id:.*Improv\*Everywhere
* $ $SPR^0 ^List-Id:.*yellowbike.*
.lists.announce/

## bring on the automatic list filtering. long time in coming.

:0
* $ $SPR^0 ^From:.*notifications\@github\.com
* $ $SPR^0 ^From:.*noreply\@github\.com
.GitHub/


# generic ezmlm filter, comes before mailman otherwise mailman's filter
# will put everything into .list.contact/
:0
* ^Mailing-list: contact .*; run by ezmlm
* ^List-Post: [<]mailto:\/.*
{
    LISTID=$MATCH
    
    :0
    * LISTID ?? ^ *\/[^@]*
    {
        LIST=$MATCH
        
        :0
        * LISTID ?? ^.*@\/[^>\.]*
        .lists.$MATCH-$LIST/
    }
}

# onelist/egroups/yahoogroups/whatever_they're_called_today
# lists with their non-standard header format, and ad nuker
:0
* ^Mailing-List: list \/[^@]+
{
    LISTID=$MATCH
    
    :0 fbw
    | sed '/-\~-->$/,/--\~->$/d'    
    
    :0
    .lists.$LISTID/
}

# Automagically handle nice standards conformant mailing lists - this
# rule and the majordomo recipe appear courtesy of Jeff Waugh Records
:0
* ^(List-Id|(X-)?Mailing-List|X-List): +\/.*
{
    LISTID=$MATCH
    
    :0
    * LISTID ?? ^.*[<]\/[^@>\.]*
    .lists.$MATCH/
    
    :0
    * LISTID ?? ^\/[^@\.]*
    .lists.$MATCH/
}

# majordomo lists
:0
* ^Sender: owner-[^@]+@[^@]+
* ^Sender: owner-\/[^@]+
.lists.$MATCH/
    
### The rest of the email will be delivered into my default mailbox,
### so no more rules are necessary